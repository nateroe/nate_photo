/**
 * NatePhoto - A photo catalog and presentation application.
 * Copyright (C) 2018 Nathaniel Roe
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact nate [at] nateroe [dot] com
 */
import { Injectable } from '@angular/core';
import { Photo } from '../model/photo';

/**
 * The GalleryContextService keeps track of the most recent gallery displayed
 * when a user chooses to view a photo's details. The service then provides
 * context for next/previous/back buttons on Photo Details.
 */
@Injectable()
export class GalleryContextService {
    /**
     * This ID is generated by this service and used as a discrepancy
     * check for get...(...) calls. If the caller's ID does not match
     * the current value, either the current data is stale or the caller
     * ID is stale. In those cases null is returned.
     */
    lastGalleryContextId: number = 0;

    /**
     * The URL of the last gallery we were in.
     */
    lastGalleryUrl: string;

    /**
     * The index of the last photo from the gallery that the viewer chose to view.
     */
    lastIndex: number;

    /**
     * All photos in the gallery.
     */
    photos: Photo[];

    constructor() { }

    /**
     * When a user clicks a photo in a gallery to go to photo details,
     * the gallery registers contextual information for photo details to use.
     *
     * @param url URL to the gallery (for back button)
     * @param index the index of the chosen photo within the photos array
     * @param photos the array of photos in the gallery
     * @return the galleryContextId for this gallery context
     */
    registerGalleryClick( url: string, index: number, photos: Photo[] ): number {
        this.lastGalleryUrl = ( url ) ? url : '/';
        this.lastIndex = index;
        this.photos = photos;
        this.lastGalleryContextId++;
        this.log( 'registerGalleryClick' );

        return this.lastGalleryContextId;
    }

    private log( message: string ) {
        console.log( '-----------' + message + '-----------' );
        console.log( 'url: ' + this.lastGalleryUrl );
        console.log( 'lastGalleryContextId : ' + this.lastGalleryContextId );
        console.log( 'lastIndex : ' + this.lastIndex );
    }

    private getNextIndex(): number {
        let result: number = this.lastIndex;
        if ( this.lastIndex < this.photos.length - 2 ) {
            result++;
        } else {
            result = 1;
        }
        return result;
    }

    private getPreviousIndex(): number {
        let result: number = this.lastIndex;
        if ( this.lastIndex > 0 ) {
            result--;
        } else {
            result = this.photos.length - 1;
        }
        return result;
    }

    /**
     * Return the ID of the next photo in the parent gallery, or null.
     * @param galleryContextId (see lastGalleryId)
     */
    getNextPhotoId( galleryContextId: number ): number {
        let result: number = null;
        if ( galleryContextId === this.lastGalleryContextId ) {
            if ( this.photos ) {
                result = this.photos[this.getNextIndex()].id;
            }
        }
        return result;
    }

    /**
     * Return the ID of the previous photo in the parent gallery, or null.
     * @param galleryContextId (see lastGalleryId)
     */
    getPreviousPhotoId( galleryContextId: number ): number {
        let result: number = null;
        if ( galleryContextId === this.lastGalleryContextId ) {
            if ( this.photos ) {
                result = this.photos[this.getPreviousIndex()].id;
            }
        }
        return result;
    }

    /**
     * Get the URL of the parent gallery, or null.
     * @param galleryContextId (see lastGalleryId)
     */
    getGalleryUrl( galleryContextId: number ): string {
        return ( galleryContextId === this.lastGalleryContextId ) ? this.lastGalleryUrl : null;
    }

    goNextPhoto( galleryContextId ) {
        if ( this.lastGalleryContextId === galleryContextId ) {
            this.lastIndex = this.getNextIndex();
        }
        console.log( 'GalleryContextService.goNextPhoto(): ' + this.lastIndex );
    }

    goPreviousPhoto( galleryContextId ) {
        if ( this.lastGalleryContextId === galleryContextId ) {
            this.lastIndex = this.getPreviousIndex();
        }
        console.log( 'GalleryContextService.goPreviousPhoto(): ' + this.lastIndex );
    }
}
